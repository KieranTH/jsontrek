version: '3'

vars:
  VERSION:
    # sh: cargo read-manifest | jq -r .version
    sh: cat ./VERSION

tasks:
  build:
    cmds:
      - echo "Building..."
      - wasm-pack build --target bundler --out-name bundle --out-dir ./builds/bundle/pkg

  build-node:
    cmds:
      - echo "Building..."
      - wasm-pack build --target nodejs --out-name node --out-dir ./builds/node/pkg


  build-all:
    cmds:
      - echo "Building..."
      - wasm-pack build --target bundler --out-name bundle --out-dir ./builds/bundle/pkg
      - wasm-pack build --target web --out-name web --out-dir ./builds/web/pkg
      - wasm-pack build --target nodejs --out-name node --out-dir ./builds/node/pkg

  echo-test:
    cmds:
      - echo "Testing..."
      - node ./benchmarks/jsontrek.mjs

  publish:
    dir: ./builds/bundle/pkg
    cmds:
      - echo "Publishing..."
      - npm publish

  patch:
    vars: 
      VER:
        sh: bump -b patch
    cmds:
      - echo "Patching..."
      - git branch --show-current | grep ^releases || { echo "Not on releases branch"; exit 1; }
      - cargo bump patch
      - git add .
      - git commit -m "Prepare patch v{{.VER}} for release"

  tag:
    cmds:
      - echo "Tagging..."
      - git branch --show-current | grep ^releases || { echo "Not on releases branch"; exit 1; }
      - git diff --cached --quiet --exit-code
      - git tag -a v{{.VERSION}} -m "Release v{{.VERSION}}" && echo "Tagged v{{.VERSION}}"
      - git push origin v{{.VERSION}}
      - git push

  release:
    cmds:
      - echo "Releasing..."
      - task patch
      - task build
      - task publish